#identifing the name of this service for Eureka Server
spring.application.name=servicio-productos

#server.port=${PORT:0} if we want random port and not a specific as a 8001, 9001, etc
#server.port=8001
server.port=${PORT:0}

#Echa time we run this app, Eureka will generate a new instance with a random port.
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

#If client and server are in diferents computers we have to specify this. If not, it is not necesary specify it
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
#This is named heartbeat, the process when eureka waits 90 secs to keep alive a service in its services table
#each client takes around 30 secs to send a notification to be register by Eureka Server.


#MySQL configuration
spring.datasource.url=jdbc:mysql://localhost:3306/db_springboot_cloud?serverTimezone=Europe/Madrid
spring.datasource.username=root
spring.datasource.password=Poke1Poke2
#identifica el paquete y la su clase Driver
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
#none para dejarlo sin efecto. Solo en ambiente de desarrollo. el valor create o create-drop crea y destruye los datos al reiniciar y update los actualiza dinï¿½micamente.
spring.jpa.hibernate.ddl-auto=update
#para que aparezca en la consola las sentencia SQL a medida que son ejecutadas
logging.level.org.hibernate.SQL=debug

spring.sleuth.sampler.probability=1.0